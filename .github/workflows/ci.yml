# .github/workflows/ci.yml
name: CI

# Grant write access for Pages deploy
permissions:
  contents: write      # allow pushing commits
  pages: write         # allow updating GitHub Pages

on:
  push:
    branches: [ dev ]
    paths-ignore:
      - '**/*.md'
      - '**/*.mdx'
      - '**/*.rst'
      - 'docs/**'
      - 'README*'
      - 'LICENSE*'
      - 'CHANGELOG*'
      - 'mkdocs.yml'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE*'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.jpeg'
      - '**/*.gif'
      - '**/*.svg'
  pull_request:
    branches: [ dev ]
    paths-ignore:
      - '**/*.md'
      - '**/*.mdx'
      - '**/*.rst'
      - 'docs/**'
      - 'README*'
      - 'LICENSE*'
      - 'CHANGELOG*'
      - 'mkdocs.yml'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE*'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.jpeg'
      - '**/*.gif'
      - '**/*.svg'

jobs:
  test-and-coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"] # Removed 3.13 as it might not be fully supported by all dependencies yet

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --force-reinstall --no-cache-dir .[dev]

      - name: Check formatting
        run: ruff format --check

      - name: Load coverage threshold
        run: echo "THRESHOLD=$(cat coverage_threshold.txt)" >> $GITHUB_ENV

      - name: Run tests with coverage
        run: pytest --cov=pyforestry --cov-report=xml --cov-report=html --cov-fail-under=$THRESHOLD

      - name: Determine base reference
        id: base
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git fetch origin ${{ github.base_ref }} --depth=1
            echo "sha=$(git merge-base HEAD origin/${{ github.base_ref }})" >> $GITHUB_OUTPUT
          else
            echo "sha=${{ github.event.before }}" >> $GITHUB_OUTPUT
          fi

      - name: Check coverage for changed files
        run: python scripts/check_changed_file_coverage.py ${{ steps.base.outputs.sha }}

      - name: Update coverage baseline
        run: |
          NEW=$(grep -o 'line-rate="[0-9.]*"' coverage.xml | head -1 | cut -d'"' -f2)
          NEW=$(python -c "import sys; print(int(round(float(sys.argv[1])*100)))" "$NEW")
          CUR=$(cat coverage_threshold.txt)
          if [ "$NEW" -gt "$CUR" ]; then
            echo "$NEW" > coverage_threshold.txt
          fi

      - name: Sync branch
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          # merge remote into local
          git pull origin ${{ github.ref_name }}

      - name: Commit updated baseline
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: update coverage baseline"
          file_pattern: coverage_threshold.txt

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: htmlcov/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          files: ./coverage.xml
          fail_ci_if_error: true
    
  docstring-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Assuming docstr-coverage is in your dev dependencies
          pip install .[dev]

      - name: Load docstring threshold
        run: echo "DOC_THRESHOLD=$(cat docstring_threshold.txt)" >> $GITHUB_ENV

      - name: Generate docstring coverage badge
        run: docstr-coverage src/pyforestry --badge .docstring_coverage.svg --fail-under=$DOC_THRESHOLD 2>&1 | tee docstring.log

      - name: Update docstring baseline
        run: |
          NEW=$(grep -o 'Total coverage: [0-9.]*%' docstring.log | tail -1 | awk '{print $3}' | tr -d '%')
          NEW=$(python -c "import sys; print(int(round(float(sys.argv[1]))))" "$NEW")
          CUR=$(cat docstring_threshold.txt)
          if [ "$NEW" -gt "$CUR" ]; then
            echo "$NEW" > docstring_threshold.txt
          fi

      - name: Commit docstring baseline
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: update docstring baseline"
          file_pattern: docstring_threshold.txt

      - name: Commit badge
        # Only commit the new badge on pushes to the main branch
        if: github.ref == 'refs/heads/main'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs: Update docstring coverage badge"
          file_pattern: ".docstring_coverage.svg"
          commit_user_name: "GitHub Actions"
          commit_user_email: "actions@github.com"
          commit_author: "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"


  build-and-deploy-docs:
    runs-on: ubuntu-latest
    needs: test-and-coverage
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12 # Or your desired version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install project dependencies and documentation-specific dependencies
          pip install .[dev]
          pip install -r docs/requirements.txt

      # NEW STEP: Generate API documentation .rst files
      - name: Generate API docs
        run: |
          sphinx-apidoc -f -o docs/source/api src/pyforestry

      # MODIFIED STEP: Change to docs directory before building
      - name: Set docs destination
        id: dest
        run: |
          if [ "$GITHUB_REF" = "refs/heads/main" ]; then
            echo "dir=stable" >> $GITHUB_OUTPUT
          else
            echo "dir=dev" >> $GITHUB_OUTPUT
          fi

      - name: Set DOCS_VERSION env
        run: |
          if [ "$GITHUB_REF" = "refs/heads/main" ]; then
            echo "DOCS_VERSION=stable" >> $GITHUB_ENV
          else
            echo "DOCS_VERSION=dev" >> $GITHUB_ENV
          fi

      - name: Build Sphinx docs
        run: make html
        working-directory: ./docs

      - name: Copy versions.json
        run: cp docs/versions.json docs/build/html/

      - name: Deploy docs to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/build/html
          destination_dir: ${{ steps.dest.outputs.dir }}
